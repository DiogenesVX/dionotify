#!/bin/bash
#### dionotify
# A simple utility to get the volume change notifications
#### Requires: coreutils, pulseaudio-utils, grep, util-linux, libnotify-bin
# for this to work, you need to set the volume increasing/decreasing step by 5. e.g:
# pactl set-sink-volume @DEFAULT_SINK@ +5%
# pactl set-sink-volume @DEFAULT_SINK@ -5%

# space_char defines a special character U+00A0 NO-BREAK SPACE, reference: https://invisible-characters.com/
space_char=" "
volume_icon_low=$(pwd)/icons/volume-low.png
volume_icon_med=$(pwd)/icons/volume-med.png
volume_icon_max=$(pwd)/icons/volume-max.png
volume_percent=$(pactl list sinks | tr ' ' '\n' | grep -m1 '%' | tr -d '%')
volume_percent_first_value=$(pactl list sinks | tr ' ' '\n' | grep -m1 '%' | tr -d '%' | head -c1)

# limit maximum volume level to 150
if [ $(pactl list sinks | tr ' ' '\n' | grep -m1 '%' | tr -d '%') -ge 150 ]; then
    pactl -- set-sink-volume 0 150%
    printf "Set volume level to: 150%%"
    volume_percent=$(pactl list sinks | tr ' ' '\n' | grep -m1 '%' | tr -d '%')
    notify-send \
    --expire-time=1700  \
    --icon=$volume_icon_max \
    $(for i in {1..20}; do printf █; done)$space_char$volume_percent%$space_char"MAXIMUM!"
    exit 0
fi

# if volume exceeded 100%
if [ $(pactl list sinks | tr ' ' '\n' | grep -m1 '%' | tr -d '%') -gt 100 ]; then
    notify-send \
    --expire-time=1700 \
    --icon=$volume_icon_max \
    $(for i in {1..20}; do printf █; done)$space_char$volume_percent%$space_char"Too loud!"
    exit 0
fi

# Set volume level to a fix value (e.g. if the current value is 73, then it will be set to 70)
if [ $(printf $volume_percent | tail -c1) -gt 0 ] && [ $(printf $volume_percent | tail -c1) -lt 5 ]; then
    pactl -- set-sink-volume 0 "$volume_percent_first_value"0%
    printf "Set volume level to: $(pactl list sinks | tr ' ' '\n' | grep -m1 '%' | tr -d '%')"
    volume_percent=$(pactl list sinks | tr ' ' '\n' | grep -m1 '%' | tr -d '%')
elif [ $(printf $volume_percent | tail -c1) -gt 5 ] && [ $(printf $volume_percent | tail -c1) -le 9 ]; then
    pactl -- set-sink-volume 0 "$volume_percent_first_value"5%
    printf "Set volume level to: $(pactl list sinks | tr ' ' '\n' | grep -m1 '%' | tr -d '%')"
    volume_percent=$(pactl list sinks | tr ' ' '\n' | grep -m1 '%' | tr -d '%')
fi

# define the percentage bar depending on the current volume level
vol_0=$(printf $(for i in {1..20}; do printf ▒; done)$space_char$volume_percent%%)
vol_5=$(printf █$(for i in {1..19}; do printf ▒; done)$space_char$volume_percent%%)
vol_10=$(printf $(for i in {1..2}; do printf █; done)$(for i in {1..18}; do printf ▒; done)$space_char$volume_percent%%)
vol_15=$(printf $(for i in {1..3}; do printf █; done)$(for i in {1..17}; do printf ▒; done)$space_char$volume_percent%%)
vol_20=$(printf $(for i in {1..4}; do printf █; done)$(for i in {1..16}; do printf ▒; done)$space_char$volume_percent%%)
vol_25=$(printf $(for i in {1..5}; do printf █; done)$(for i in {1..15}; do printf ▒; done)$space_char$volume_percent%%)
vol_30=$(printf $(for i in {1..6}; do printf █; done)$(for i in {1..14}; do printf ▒; done)$space_char$volume_percent%%)
vol_35=$(printf $(for i in {1..7}; do printf █; done)$(for i in {1..13}; do printf ▒; done)$space_char$volume_percent%%)
vol_40=$(printf $(for i in {1..8}; do printf █; done)$(for i in {1..12}; do printf ▒; done)$space_char$volume_percent%%)
vol_45=$(printf $(for i in {1..9}; do printf █; done)$(for i in {1..11}; do printf ▒; done)$space_char$volume_percent%%)
vol_50=$(printf $(for i in {1..10}; do printf █; done)$(for i in {1..10}; do printf ▒; done)$space_char$volume_percent%%)
vol_55=$(printf $(for i in {1..11}; do printf █; done)$(for i in {1..9}; do printf ▒; done)$space_char$volume_percent%%)
vol_60=$(printf $(for i in {1..12}; do printf █; done)$(for i in {1..8}; do printf ▒; done)$space_char$volume_percent%%)
vol_65=$(printf $(for i in {1..13}; do printf █; done)$(for i in {1..7}; do printf ▒; done)$space_char$volume_percent%%)
vol_70=$(printf $(for i in {1..14}; do printf █; done)$(for i in {1..6}; do printf ▒; done)$space_char$volume_percent%%)
vol_75=$(printf $(for i in {1..15}; do printf █; done)$(for i in {1..5}; do printf ▒; done)$space_char$volume_percent%%)
vol_80=$(printf $(for i in {1..16}; do printf █; done)$(for i in {1..4}; do printf ▒; done)$space_char$volume_percent%%)
vol_85=$(printf $(for i in {1..17}; do printf █; done)$(for i in {1..3}; do printf ▒; done)$space_char$volume_percent%%)
vol_90=$(printf $(for i in {1..18}; do printf █; done)$(for i in {1..2}; do printf ▒; done)$space_char$volume_percent%%)
vol_95=$(printf $(for i in {1..19}; do printf █; done)$(for i in {1..2}; do printf ▒; done)$space_char$volume_percent%%)
vol_100=$(printf $(for i in {1..20}; do printf █; done)$space_char$volume_percent%%)

# includes vol_X variable into vol_print variable and attaching the volume percentage instead X
vol_print=vol_$volume_percent

# defining functions
function volume_notification_low() {
    notify-send \
    --expire-time=1700 \
    --icon=$volume_icon_low \
    "${!vol_print}"
}

function volume_notification_med() {
    notify-send \
    --expire-time=1700 \
    --app-name="Volume Control"  \
    --icon=$volume_icon_med \
    "${!vol_print}"
}

function volume_notification_max() {
    notify-send \
    --expire-time=1700 \
    --icon=$volume_icon_max \
    "${!vol_print}"
}

# dividing volume levels into low (1 - 30), medium (30 - 70), maximum (70 -100)
if [ $(pactl list sinks | tr ' ' '\n' | grep -m1 '%' | tr -d '%') -le 30 ]; then
    case $volume_percent in
        "$volume_percent")
        volume_notification_low
        ;;
    esac
elif [ $(pactl list sinks | tr ' ' '\n' | grep -m1 '%' | tr -d '%') -gt 30 ] && [ $(pactl list sinks | tr ' ' '\n' | grep -m1 '%' | tr -d '%') -le 70 ]; then
    case $volume_percent in
        "$volume_percent")
        volume_notification_med
        ;;
    esac
else
    case $volume_percent in
        "$volume_percent")
        volume_notification_max
        ;;
    esac
fi

exit 0